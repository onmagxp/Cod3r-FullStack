

### Ordem de Precedência dos Operadores em JavaScript

1. **Unários** (`++`, `--`, `!`, `typeof`, `void`, `delete`, `+` (unário), `-` (unário))
2. **Aritméticos** (`*`, `/`, `%`, `+` (adição), `-` (subtração))
3. **Relacionais** (`<`, `<=`, `>`, `>=`)
4. **Igualdade** (`==`, `!=`, `===`, `!==`)
5. **Lógicos** (`&&`, `||`)
6. **Ternário** (`? :`)
7. **Atribuição** (`=`, `+=`, `-=`, `*=`, `/=`, `%=`, `<<=`, `>>=`, `>>>=`, `&=`, `^=`, `|=`)

#### Explicação
- **Unários**: Estes operadores têm a maior precedência, pois operam diretamente sobre um único operando.
- **Aritméticos**: Operadores de multiplicação, divisão e módulo têm precedência maior que os de adição e subtração.
- **Relacionais**: Operadores que comparam valores.
- **Igualdade**: Operadores que verificam a igualdade ou desigualdade.
- **Lógicos**: Operadores lógicos, onde `&&` tem maior precedência que `||`.
- **Ternário**: O operador condicional ternário (`? :`).
- **Atribuição**: Operadores que atribuem valores às variáveis.

---

## 1. Aritméticos
Operadores usados para realizar operações matemáticas básicas.

- **Adição**: `5 + 2 = 7`
- **Subtração**: `5 - 2 = 3`
- **Multiplicação**: `5 * 2 = 10`
- **Divisão**: `5 / 2 = 2.5`
- **Módulo (Resto da Divisão)**: `5 % 2 = 1`
- **Exponenciação**: `5 ** 2 = 25`

### Detalhamento da Ordem de Precedência dos Aritméticos

1. Parênteses (`()`) para agrupar e priorizar operações
2. Exponenciação (`**`)
3. Multiplicação (`*`), Divisão (`/`), Módulo (`%`) - Mesma precedência; resolvem-se da esquerda para a direita
4. Adição (`+`), Subtração (`-`)

---

## 2. Atribuição
Operadores usados para atribuir valores a variáveis.

### Exemplos

- `var a = 5 + 3; // a = 8`
- `var b = a % 5; // b = 3`
- `var c = 5 * b ** 2; // c = 45`
- `var d = 10 - a / 2; // d = 6`
- `var e = 6 * 2 / d; // e = 2`
- `var f = b % e + 4 / e; // f = 3`

### 2.1 Auto-Atribuições
Atribuição de novos valores a uma variável baseada em seu valor atual.

- `var n = 3`
  - `n = n + 4; // n = 7`
  - `n = n - 5; // n = 2`
  - `n = n * 4; // n = 8`

### 2.2 Atribuições Simplificadas
Formas mais curtas de escrever auto-atribuições.

- `var n = 3`
  - `n += 4; // Equivale a n = n + 4`
  - `n -= 5; // Equivale a n = n - 5`
  - `n *= 4; // Equivale a n = n * 4`

Nota: Funciona para a mesma variável. Por exemplo, `n = n + x` pode ser simplificado, mas `n = m + x` não pode.

---

## 3. Relacionais
Operadores que comparam dois valores.

- **Maior**: `5 > 2 // true`
- **Menor**: `7 < 4 // false`
- **Maior ou Igual**: `8 >= 8 // true`
- **Menor ou Igual**: `9 <= 7 // false`
- **Igualdade**: `5 == 5 // true`
- **Diferente**: `4 != 4 // false`
- **Igualdade Estrita** (compara valor e tipo): `5 === '5' // false`
- **Diferente Estrito** (compara valor e tipo): `5 !== '5' // true`

### 3.1 Igualdade Estrita
- **Sintaxe**: `a === b`
- **Descrição**: Retorna `true` se `a` e `b` têm o mesmo valor e o mesmo tipo. Retorna `false` se os valores ou os tipos forem diferentes.

  **Exemplos**:
  - Valores e Tipos Iguais: `5 === 5 // true`
  - Valores Diferentes: `5 === 10 // false`
  - Tipos Diferentes: `5 === '5' // false`
  - Booleanos e Números: `true === 1 // false`
  - Objetos e Strings: `'hello' === new String('hello') // false`

### 3.2 Inequidade Estrita
- **Sintaxe**: `a !== b`
- **Descrição**: Retorna `true` se `a` e `b` são de tipos diferentes ou se são de tipos iguais, mas com valores diferentes. Retorna `false` se ambos os valores são iguais e do mesmo tipo.

  **Exemplos**:
  - Valores Diferentes: `5 !== '5' // true`
  - Valores e Tipos Diferentes: `3 !== 4 // true`
  - Valores e Tipos Iguais: `10 !== 10 // false`

---

## 4. Lógicos
Operadores usados para combinar expressões booleanas.

- **Negação (`!`)**: Inverte o valor booleano.
  - `!true // false`
  - `!false // true`

- **E (`&&`)**: Verdadeiro se ambos os operandos são verdadeiros.
  - `true && true // true`
  - `true && false // false`

- **Ou (`||`)**: Verdadeiro se pelo menos um dos operandos é verdadeiro.
  - `true || false // true`
  - `false || false // false`

---

Claro, Matheus Aguilera! Vamos criar uma aula bem didática sobre operadores unários em JavaScript, com explicações simples e analogias para facilitar o entendimento.

### 5: Operadores Unários

#### Introdução aos Operadores Unários
Operadores unários são operadores que operam em apenas um operando. Eles são usados para realizar várias operações simples, como incrementação, decrementação, negação lógica e aritmética.

#### Tipos de Operadores Unários

Vamos explorar os principais operadores unários em JavaScript:

1. **Incremento (`++`)**
2. **Decremento (`--`)**
3. **Negação lógica (`!`)**
4. **Negação aritmética (`-`)**
5. **Tipo (`typeof`)**
6. **Deleção (`delete`)**
7. **Verdadeiro Boolean (`void`)**

#### 1. Incremento (`++`)

##### Analogias
Pense no incremento como uma escada. Cada vez que você usa o operador de incremento, você sobe um degrau.

```javascript
let a = 5;
a++; // a = a + 1
console.log(a); // 6
```

Existem duas formas de incremento:
- **Pós-incremento (`a++`)**: Retorna o valor original e depois incrementa.
- **Pré-incremento (`++a`)**: Incrementa primeiro e depois retorna o valor incrementado.

```javascript
let b = 5;
console.log(b++); // 5 -> Retorna o valor original e depois incrementa
console.log(b); // 6 -> Valor após incremento

let c = 5;
console.log(++c); // 6 -> Incrementa primeiro e depois retorna o valor incrementado
```


#### 2. Decremento (`--`)

##### Analogias
Pense no decremento como uma descida de escada. Cada vez que você usa o operador de decremento, você desce um degrau.

```javascript
let d = 5;
d--; // d = d - 1
console.log(d); // 4
```

Assim como no incremento, existem duas formas de decremento:
- **Pós-decremento (`d--`)**: Retorna o valor original e depois decrementa.
- **Pré-decremento (`--d`)**: Decrementa primeiro e depois retorna o valor decrementado.

```javascript
let e = 5;
console.log(e--); // 5 -> Retorna o valor original e depois decrementa
console.log(e); // 4 -> Valor após decremento

let f = 5;
console.log(--f); // 4 -> Decrementa primeiro e depois retorna o valor decrementado
```


#### 3. Negação Lógica (`!`)

##### Analogias
Pense na negação lógica como um interruptor de luz. Se a luz está acesa (verdadeira), a negação a apaga (falsa) e vice-versa.

```javascript
let isTrue = true;
console.log(!isTrue); // false -> Inverte o valor booleano

let isFalse = false;
console.log(!isFalse); // true -> Inverte o valor booleano
```


#### 4. Negação Aritmética (`-`)

##### Analogias
Pense na negação aritmética como inverter o sinal de um número. Se o número é positivo, ele se torna negativo e vice-versa.

```javascript
let num = 10;
console.log(-num); // -10 -> Inverte o sinal

let negNum = -10;
console.log(-negNum); // 10 -> Inverte o sinal
```


#### 5. Tipo (`typeof`)

##### Analogias
Pense em `typeof` como um detector de tipo. Ele nos diz qual o tipo do valor ou variável que estamos analisando.

```javascript
let g = 10;
console.log(typeof g); // 'number' -> Tipo número

let h = 'Hello';
console.log(typeof h); // 'string' -> Tipo string
```


#### 6. Deleção (`delete`)

##### Analogias
Pense em `delete` como um apagador. Ele remove uma propriedade de um objeto.

```javascript
let obj = { nome: 'Ana', idade: 30 };
delete obj.idade; // Remove a propriedade idade
console.log(obj); // { nome: 'Ana' } -> A propriedade idade foi removida
```

#### 7. Void

##### Analogias
Pense em `void` como uma ferramenta para descartar o valor de uma expressão e retornar `undefined`.

```javascript
console.log(void 0); // undefined -> Garante que a expressão retorne undefined

let i = 10;
console.log(void (i = 20)); // undefined -> Garante que a expressão retorne undefined, mesmo que a variável seja modificada
```

### Resumo
Os operadores unários em JavaScript são ferramentas úteis que nos permitem realizar operações simples em apenas um operando. Eles incluem incremento, decremento, negação lógica e aritmética, verificação de tipo, deleção e uso de `void`.

---

## 6. Operador Ternário
O operador ternário é uma forma curta de fazer uma escolha entre dois valores, baseado em uma condição.

### Sintaxe
Se a condição for verdadeira, escolha o primeiro valor. Caso contrário, escolha o segundo valor.
```
condição ? valor1 : valor2
```

### Exemplos Detalhados

- **Exemplo 1**: Verificar se a pessoa é maior de idade
  ```javascript
  var idade = 16;
  var status = (idade >= 18) ? 'adulto' : 'menor';
  // Se a idade é 16, status será 'menor'.
  ```

- **Exemplo 2**: Verificar se a pessoa pode votar
  ```javascript
  var idade = 15;
  var podeVotar = (idade >= 16) ? 'sim' : 'não';
  // Se a idade é 15, podeVotar será 'não'.
  ```

- **Exemplo 3**: Verificar se a loja está aberta (considerando que está aberta entre 9h e 18h)
  ```javascript
  var hora = 10;
  var lojaAberta = (hora >= 9 && hora <= 18) ? 'aberta' : 'fechada';
  // Se a hora é 10, lojaAberta será 'aberta'.
  ```

### Exemplos de Expressões Lógicas

- **Exemplo 1**: Verificar se a idade está entre 15 e 17 anos
  ```javascript
  var idade = 16;
  var entre15e17 = (idade >= 15 && idade <= 17) ? 'sim' : 'não';
  // Se a idade é 16, entre15e17 será 'sim'.
  ```

- **Exemplo 2**: Verificar se o estado é RJ ou SP
  ```javascript
  var estado = 'RJ';
  var ehRJouSP = (estado == 'RJ' || estado == 'SP') ? 'sim' : 'não';
  // Se o estado é 'RJ', ehRJouSP será 'sim'.
  ```

- **Exemplo 3**: Verificar se o salário é acima de 1500 e a pessoa não é do sexo masculino
  ```javascript
  var salario = 2000;
  var sexo = 'F';
  var salarioEsexo = (salario > 1500 && sexo != 'M') ? 'sim' : 'não';
  // Se o salário é 2000 e o sexo é 'F', salarioEsexo será 'sim'.
  ```
